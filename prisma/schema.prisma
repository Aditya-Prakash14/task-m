// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  timezone  String   @default("UTC")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  todos      Todo[]
  events     Event[]
  categories Category[]
  tags       Tag[]
  reminders  Reminder[]

  @@index([email])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TodoStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Todo {
  id          String      @id @default(uuid())
  title       String
  description String?     @db.Text
  status      TodoStatus  @default(PENDING)
  priority    Priority    @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  estimatedTime Int?      // in minutes
  actualTime    Int?      // in minutes
  
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  parentId    String?
  parent      Todo?       @relation("SubTodos", fields: [parentId], references: [id], onDelete: Cascade)
  subTodos    Todo[]      @relation("SubTodos")
  
  tags        TodoTag[]
  reminders   Reminder[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId, status])
  @@index([userId, dueDate])
  @@index([categoryId])
}

enum EventStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

model Event {
  id          String       @id @default(uuid())
  title       String
  description String?      @db.Text
  location    String?
  status      EventStatus  @default(SCHEDULED)
  
  startTime   DateTime
  endTime     DateTime
  isAllDay    Boolean      @default(false)
  
  // Recurring event support
  isRecurring Boolean      @default(false)
  recurrenceRule String?   @db.Text // RRULE format
  recurrenceEnd  DateTime?
  
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  tags        EventTag[]
  reminders   Reminder[]
  attendees   Attendee[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId, startTime])
  @@index([userId, endTime])
  @@index([categoryId])
}

model Category {
  id          String   @id @default(uuid())
  name        String
  color       String   @default("#3b82f6")
  description String?
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  todos       Todo[]
  events      Event[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

model Tag {
  id        String    @id @default(uuid())
  name      String
  color     String    @default("#6b7280")
  
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  todos     TodoTag[]
  events    EventTag[]
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

model TodoTag {
  todoId String
  todo   Todo   @relation(fields: [todoId], references: [id], onDelete: Cascade)
  
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([todoId, tagId])
  @@index([todoId])
  @@index([tagId])
}

model EventTag {
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  tagId   String
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([eventId, tagId])
  @@index([eventId])
  @@index([tagId])
}

enum ReminderType {
  EMAIL
  PUSH
  SMS
}

model Reminder {
  id          String       @id @default(uuid())
  type        ReminderType @default(PUSH)
  reminderTime DateTime
  message     String?
  isSent      Boolean      @default(false)
  
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  todoId      String?
  todo        Todo?        @relation(fields: [todoId], references: [id], onDelete: Cascade)
  
  eventId     String?
  event       Event?       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId, reminderTime])
  @@index([todoId])
  @@index([eventId])
}

model Attendee {
  id       String  @id @default(uuid())
  email    String
  name     String?
  status   String  @default("pending") // pending, accepted, declined
  
  eventId  String
  event    Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
  @@index([email])
}
